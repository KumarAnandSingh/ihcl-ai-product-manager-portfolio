version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: agentops-postgres
    environment:
      POSTGRES_DB: agentops_dashboard
      POSTGRES_USER: agentops
      POSTGRES_PASSWORD: agentops_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - agentops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agentops -d agentops_dashboard"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: agentops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agentops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: agentops-api
    environment:
      DATABASE_URL: postgresql+asyncpg://agentops:agentops_password@postgres:5432/agentops_dashboard
      REDIS_URL: redis://redis:6379/0
      API_HOST: 0.0.0.0
      API_PORT: 8000
      ENVIRONMENT: production
      LOG_LEVEL: INFO
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agentops-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Streamlit Dashboard
  dashboard:
    build:
      context: .
      dockerfile: docker/Dockerfile.dashboard
    container_name: agentops-dashboard
    environment:
      API_BASE_URL: http://api:8000/api/v1
      DASHBOARD_HOST: 0.0.0.0
      DASHBOARD_PORT: 8501
      ENVIRONMENT: production
    ports:
      - "8501:8501"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - agentops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: agentops-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - agentops-network
    restart: unless-stopped

  # Grafana for Advanced Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: agentops-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
      - postgres
    networks:
      - agentops-network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: agentops-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - dashboard
      - grafana
    networks:
      - agentops-network
    restart: unless-stopped

  # Background Worker for Processing
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: agentops-worker
    environment:
      DATABASE_URL: postgresql+asyncpg://agentops:agentops_password@postgres:5432/agentops_dashboard
      REDIS_URL: redis://redis:6379/0
      ENVIRONMENT: production
      LOG_LEVEL: INFO
    command: ["python", "-m", "celery", "worker", "-A", "src.monitoring.tasks", "--loglevel=info"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agentops-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

  # Celery Beat Scheduler
  scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    container_name: agentops-scheduler
    environment:
      DATABASE_URL: postgresql+asyncpg://agentops:agentops_password@postgres:5432/agentops_dashboard
      REDIS_URL: redis://redis:6379/0
      ENVIRONMENT: production
      LOG_LEVEL: INFO
    command: ["python", "-m", "celery", "beat", "-A", "src.monitoring.tasks", "--loglevel=info"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - agentops-network
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

networks:
  agentops-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local